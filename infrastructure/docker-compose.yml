services:
  rabbitmq:
    build:
      context: .
      dockerfile: Dockerfiles.rabbitmq
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: Pass123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    build:
      context: .
      dockerfile: Dockerfiles.redis
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: ["redis-server", "--appendonly", "yes"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  postgres:
    build:
      context: .
      dockerfile: Dockerfiles.postgres
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: odynn
      POSTGRES_PASSWORD: Pass123
      POSTGRES_DB: odynn_platform
      TZ: Asia/Kolkata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U odynn_platform"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  mongodb:
    build:
      context: .
      dockerfile: Dockerfiles.mongodb
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: Pass123
    volumes:
      - mongodb_data:/data/db
    restart: unless-stopped
    # Optional: add healthcheck if you want

  crm-core:
    build:
      context: ..
      dockerfile: crm_core/Dockerfile.crm_core
    container_name: crm-core
    ports:
      - "8000:8000"
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_started
    environment:
      DJANGO_SETTINGS_MODULE: crm_core.settings.development
    restart: unless-stopped

  celery_worker_marriott:
    build:
      context: ..
      dockerfile: crm_core/Dockerfile.marriott_consumer
    container_name: marriott_consumer
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DJANGO_SETTINGS_MODULE: crm_core.settings.development
    restart: unless-stopped
    command: ["celery", "-A", "crm_core", "worker", "-n", "marriott_worker", "-Q", "Marriott", "--loglevel=INFO"]

  celery_worker_hyatt:
    build:
      context: ..
      dockerfile: crm_core/Dockerfile.hyatt_consumer
    container_name: hyatt_consumer
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DJANGO_SETTINGS_MODULE: crm_core.settings.development
    restart: unless-stopped
    command: [ "celery", "-A", "crm_core", "worker", "-n", "hyatt_worker", "-Q", "Hyatt", "--loglevel=INFO" ]

  flower:
    build:
      context: ..
      dockerfile: crm_core/Dockerfile.flower
    container_name: flower
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "5555:5555"
    environment:
      CELERY_BROKER_URL: "amqp://admin:Pass123@rabbitmq:5672//"
    restart: unless-stopped

  nginx:
    build:
      context: .
      dockerfile: Dockerfiles.nginx
    ports:
      - "80:80"
    volumes:
      - ./crm_core/staticfiles:/usr/share/nginx/static:ro
    depends_on:
      - crm-core

  fastapi:
    build:
      context: ..
      dockerfile: wrapper_api/Dockerfiles.app
    ports:
      - "9000:9000"
    depends_on:
      - crm-core

volumes:
  rabbitmq_data:
  redis_data:
  postgres_data:
  mongodb_data:
